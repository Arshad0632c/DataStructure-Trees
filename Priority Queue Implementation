//Priority Queue implementation in C++:
#include <iostream>
#include <vector>
using namespace std;
void insert(vector<int> &hT, int newNum);
void deleteNode(vector<int> &hT, int num);
void printArray(vector<int> &hT);
void heapify(vector<int> &hT, int i);
void swap(int *a, int *b);
void printArray(vector<int> &hT);
void Extract_Max(vector<int> &hT);

int main() {
  vector<int> heapTree; int n, ele;
  cout<<"Enter the count of elements: ";
  cin>>n;
  for(int i=0;i<n;i++)
  {
  	cin>>ele;
  	insert(heapTree, ele);
  }
  cout << "Max-Heap array: ";
  printArray(heapTree);
  Extract_Max(heapTree);//deletes the max value (at root)
  cout << "After deleting max element: ";
  printArray(heapTree);
  cout<<"Enter element to delete: ";
  cin>>ele;
  deleteNode(heapTree, ele);//deletes the desired value
  cout << "After deleting the given element: ";
  printArray(heapTree);
}
// Function to insert an element into the tree
void insert(vector<int> &hT, int newNum) {
  int size = hT.size();
  if (size == 0)
    hT.push_back(newNum);
   else 
  {
    hT.push_back(newNum);
    size = hT.size();
    for (int i = size / 2 - 1; i >= 0; i--)
      heapify(hT, i);
    }
}
// Function to heapify the tree
void heapify(vector<int> &hT, int i) {
  int size = hT.size();
  int largest = i;
  int l = 2 * i + 1;  int r = 2 * i + 2;
  if (l < size && hT[l] > hT[largest])
    largest = l;
  if (r < size && hT[r] > hT[largest])
    largest = r;
  // Swap and continue heapifying if root is not largest
  if (largest != i) {
    swap(&hT[i], &hT[largest]);
    heapify(hT, largest);
  }
}

// Function to delete max element from the tree
void Extract_Max(vector<int> &hT) {
  int size = hT.size();
  swap(&hT[0], &hT[size - 1]);
  hT.pop_back();
  for (int i = size / 2 - 1; i >= 0; i--) {
    heapify(hT, i);
  }
}


// Function to element from the tree
void deleteNode(vector<int> &hT, int num) {
  int size = hT.size();
  int i;
  for (i = 0; i < size; i++) {
    if (num == hT[i])
      break;
  }
  swap(&hT[i], &hT[size - 1]);
  hT.pop_back();
  for (int i = size / 2 - 1; i >= 0; i--) {
    heapify(hT, i);
  }
}
// Function to swap position of two elements
void swap(int *a, int *b) {
  int temp = *b;
  *b = *a;
  *a = temp;
}
// Print the tree
void printArray(vector<int> &hT) {
  for (int i = 0; i < hT.size(); ++i)
    cout << hT[i] << " ";
  cout << "\n";
}

